import os
import asyncio
import random
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_LINK = "https://t.me/bbsignalss"
CHANNEL_USERNAME = "@bbsignalss"
REF_LINK = "https://1whecs.life/v3/lucky-jet-updated?p=hee9"

TEXT = {
    "ru": {
        "choose_lang": "üåê *–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫* üá∑üá∫ / üá∫üá¶",
        "lang_ru": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
        "lang_ua": "–£–∫—Ä–∞—ó–Ω—Å—å–∫–∞ üá∫üá¶",
        "start": (
            "üî• *–¢–ï, –ö–¢–û –ò–î–£–¢ –ü–†–û–¢–ò–í –ü–†–ê–í–ò–õ, –í–°–ï–ì–î–ê –í –í–´–ò–ì–†–´–®–ï\\. –ü–û–†–ê –°–´–ì–†–ê–¢–¨ –ü–û\\-–¢–í–û–ï–ú–£\\!* \n\n"
            "ü§ñ _LuckyJet –°–∏–≥–Ω–∞–ª—ã ‚Äî —Ç–≤–æ–π —à–∞–Ω—Å –Ω–∞ –ø–ª—é—Å_\\! \n\n"
            "–ù–∞—à –±–æ—Ç –ø–æ–¥–∫–ª—é—á—ë–Ω –∫ *—É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É –ò–ò*, –∫–æ—Ç–æ—Ä—ã–π –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–∫—Ä—ã—Ç—ã–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã Lucky Jet –∏ –≤—ã—á–∏—Å–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∏–∫—Å—ã –¥–æ –Ω–∞—á–∞–ª–∞ —Ä–∞—É–Ω–¥–∞\\. \n\n"
            "üü¢ *–¢–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤ ‚Äî –¥–æ 90%*\\! \n"
            "üõ°Ô∏è –í—Å—ë –∞–±—Å–æ–ª—é—Ç–Ω–æ –ª–µ–≥–∞–ª—å–Ω–æ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–∫—Ä—ã—Ç—ã–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –ª–∞–∑–µ–π–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ —Å–∏—Ö –ø–æ—Ä –Ω–µ –ø—Ä–∏–∫—Ä—ã–ª–∏ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∏\\. \n\n"
            "_\\(–í –ø–µ—Ä–≤—ã–µ –º–∏–Ω—É—Ç—ã –ò–ò —Ç–µ—Å—Ç–∏—Ä—É–µ—Ç —Ç–≤–æ—é —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –ø–∞—Ç—Ç–µ—Ä–Ω –∞–∫–∫–∞—É–Ω—Ç–∞\\. –° –∫–∞–∂–¥–æ–π –∏–≥—Ä–æ–π —Ç–æ—á–Ω–æ—Å—Ç—å —Å–∏–≥–Ω–∞–ª–æ–≤ —Ç–æ–ª—å–∫–æ —Ä–∞—Å—Ç—ë—Ç\\!\\)_"
        ),
        "subscribe": "üéØ *–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª*:",
        "go_to_channel": "üîó –ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª",
        "check_sub": "‚úÖ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É",
        "not_sub": "‚ùóÔ∏è *–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª*\\. \n\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞\\.",
        "deposit_request": (
            "üí∏ *–ß—Ç–æ–±—ã –±–æ—Ç –Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É, –≤–Ω–µ—Å–∏ –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ 1Win\\!* \n\n"
            "‚öñÔ∏è _–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω –¥–µ–ø–æ–∑–∏—Ç–∞ ‚Äî –æ—Ç 1000‚Ç¥ –¥–æ 10‚ÄØ000‚Ç¥\\._\n"
            "–ú–µ–ª–∫–∏–µ –¥–µ–ø—ã –Ω–µ —Å–æ–≤–µ—Ç—É–µ–º: *–∞–ª–≥–æ—Ä–∏—Ç–º—ã —Ä–µ–∂—É—Ç –∫—Ä—É–ø–Ω—ã–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –¥–ª—è –º–∞–ª–µ–Ω—å–∫–∏—Ö —Å—Ç–∞–≤–æ–∫\\.*\n"
            "–ù–æ –∏ –∂–∞–¥–Ω–∏—á–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ ‚Äî —Å—É–º–º—ã –±–æ–ª—å—à–µ 10‚ÄØ000‚Ç¥ –º–æ–≥—É—Ç –ø—Ä–∏–≤–ª–µ—á—å –≤–Ω–∏–º–∞–Ω–∏–µ —Å–ª—É–∂–±—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–∞–∑–∏–Ω–æ\\.\n\n"
            "üí° *–ü–æ –æ–ø—ã—Ç—É ‚Äú—Å—Ç–∞—Ä–∏—á–∫–æ–≤‚Äù*: –∫—Ç–æ —Å—Ç–∞—Ä—Ç—É–µ—Ç –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ, —É–∂–µ –Ω–∞ –ø–µ—Ä–≤—ã—Ö —Ä–∞—É–Ω–¥–∞—Ö –ª–æ–≤–∏—Ç —Ö–æ—Ä–æ—à–∏–µ –∏–∫—Å—ã –∏ –Ω–µ –ø–æ–ø–∞–¥–∞–µ—Ç –≤ ‚Äú—Ä–∏—Å–∫\\-–≥—Ä—É–ø–ø—É‚Äù\\.\n\n"
            "üì≤ *–ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç —Å–≤–æ–µ–≥–æ –¥–µ–ø–æ–∑–∏—Ç–∞* ‚Äî –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–π–º—ë—Ç –º–µ–Ω—å—à–µ –º–∏–Ω—É—Ç—ã, —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—â–∏—â–µ–Ω—ã\\!"
        ),
        "wait_deposit": (
            "üïí *–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–ø–æ–∑–∏—Ç*\\.\n"
            "–ü–æ–¥–æ–∂–¥–∏ –±—É–∫–≤–∞–ª—å–Ω–æ 10 —Å–µ–∫—É–Ω–¥ ‚Äî –∏–¥—ë—Ç –∞–Ω–∞–ª–∏–∑ —Å–µ—Å—Å–∏–∏ –ò–ò\\!"
        ),
        "access": (
            "üéâ *–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º\\!* –¢—ã –≤—Å—ë —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ ‚Äî –¥–æ—Å—Ç—É–ø –∫ —Å–∏–≥–Ω–∞–ª–∞–º Lucky Jet –æ—Ç–∫—Ä—ã—Ç\\!\n\n"
            "üöÄ *–ñ–µ–ª–∞–µ–º –º–æ—â–Ω—ã—Ö –∏–∫—Å–æ–≤ –∏ —Ç–æ–ª—å–∫–æ –∫—Ä—É–ø–Ω—ã—Ö –ø–æ–±–µ–¥\\!* \n\n"
            "–ù–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Å–∏–≥–Ω–∞–ª\\. ‚¨áÔ∏è"
        ),
        "signal_btn": "üé∞ –ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª",
        "wait_signal_btn": "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ\\.\\.\\.",
        "analyzing": "ü§ñ –ò–ò —Å–æ–±–∏—Ä–∞–µ—Ç —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º\\.\n‚è≥ –û–∂–∏–¥–∞–π—Ç–µ \\- —ç—Ç–æ –∑–∞–π–º—ë—Ç –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥\\.",
        "get_signal": "üéØ *–õ–æ–≤–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç*: x{:.2f}",
        "reviews": "üì¢ –û—Ç–∑—ã–≤—ã",
        "back": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "registered": "‚úÖ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è"
    }
}

USERS = {}

bot = Bot(token=BOT_TOKEN, parse_mode="MarkdownV2")
dp = Dispatcher(bot)

# --- PROGRESS BAR –§–£–ù–ö–¶–ò–Ø ---
async def show_progress_bar(chat_id):
    bars = [
        "üïí ‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 0%",
        "üïí ‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí‚ñí 30%",
        "üïí ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñí‚ñí‚ñí‚ñí 60%",
        "üïí ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà 100%",
    ]
    msg = await bot.send_message(chat_id, bars[0])
    for i in range(1, len(bars)):
        await asyncio.sleep(0.7)
        await bot.edit_message_text(bars[i], chat_id, msg.message_id)
    await asyncio.sleep(0.5)
    await bot.delete_message(chat_id, msg.message_id)

def lang_kb():
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add(TEXT["ru"]["lang_ru"], TEXT["ru"]["lang_ua"])
    return kb

def channel_and_check_kb():
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton(TEXT["ru"]["go_to_channel"], url=CHANNEL_LINK),
        InlineKeyboardButton(TEXT["ru"]["check_sub"], callback_data="check_sub")
    )
    return kb

def after_sub_kb():
    kb = InlineKeyboardMarkup(row_width=2)
    kb.add(
        InlineKeyboardButton(TEXT["ru"]["back"], callback_data="back_to_sub"),
        InlineKeyboardButton(TEXT["ru"]["registered"], callback_data="registered")
    )
    return kb

def after_sub_text():
    return (
        "ü•á *–û—Ç–ª–∏—á–Ω–æ\\!*\n\n"
        "–¢–µ–ø–µ—Ä—å —Ç–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ \\- —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ 1Win\\. –¢–æ–ª—å–∫–æ —Ç–∞–∫ –ò–ò —Å–º–æ–∂–µ—Ç ‚Äú–≤–∏–¥–µ—Ç—å‚Äù —Ç–≤–æ–∏ —Ä–∞—É–Ω–¥—ã –∏ –¥–∞–≤–∞—Ç—å —Å–∏–≥–Ω–∞–ª—ã\\.\n\n"
        "üí∏ –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Å—è —Ç–æ–ª—å–∫–æ –ø–æ —ç—Ç–æ–π [–ü–µ—Ä–µ–π—Ç–∏ –∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏]({}) \\(–¥–∞–∂–µ –µ—Å–ª–∏ —É —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç \\- –ø—Ä–æ—Å—Ç–æ —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π\\!\\)\\.\n"
        "_–ï—Å–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –±—É–¥–µ—Ç –Ω–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ \\- —Å–∫—Ä–∏–ø—Ç –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –∏ —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –±—É–¥—É—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏\\._"
    ).format(REF_LINK)

def deposit_kb():
    kb = InlineKeyboardMarkup()
    kb.add(
        InlineKeyboardButton(TEXT["ru"]["reviews"], url=CHANNEL_LINK),
        InlineKeyboardButton(TEXT["ru"]["back"], callback_data="back_to_register")
    )
    return kb

def signal_kb(active=True):
    kb = ReplyKeyboardMarkup(resize_keyboard=True)
    if active:
        kb.add(TEXT["ru"]["signal_btn"], TEXT["ru"]["back"])
    else:
        kb.add(TEXT["ru"]["wait_signal_btn"], TEXT["ru"]["back"])
    return kb

@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    USERS[message.from_user.id] = {
        "step": "choose_lang",
        "signals_given": 0,
        "access": False,
        "can_signal": True
    }
    await message.answer(TEXT["ru"]["choose_lang"], reply_markup=lang_kb())

@dp.message_handler(lambda m: m.text in [TEXT["ru"]["lang_ru"], TEXT["ru"]["lang_ua"]])
async def choose_lang(message: types.Message):
    USERS[message.from_user.id]["step"] = "start"
    await message.answer(TEXT["ru"]["start"], reply_markup=types.ReplyKeyboardRemove())
    await message.answer(
        TEXT["ru"]["subscribe"],
        reply_markup=channel_and_check_kb()
    )

@dp.callback_query_handler(lambda call: call.data == "check_sub")
async def check_sub(call: types.CallbackQuery):
    USERS[call.from_user.id]["step"] = "register"
    await call.message.answer(after_sub_text(), reply_markup=after_sub_kb())

@dp.callback_query_handler(lambda call: call.data == "back_to_sub")
async def back_to_sub(call: types.CallbackQuery):
    USERS[call.from_user.id]["step"] = "start"
    await call.message.answer(TEXT["ru"]["subscribe"], reply_markup=channel_and_check_kb())

@dp.callback_query_handler(lambda call: call.data == "back_to_register")
async def back_to_register(call: types.CallbackQuery):
    USERS[call.from_user.id]["step"] = "register"
    await call.message.answer(after_sub_text(), reply_markup=after_sub_kb())

@dp.callback_query_handler(lambda call: call.data == "registered")
async def registered_step(call: types.CallbackQuery):
    USERS[call.from_user.id]["step"] = "deposit"
    await call.message.answer(TEXT["ru"]["deposit_request"], reply_markup=deposit_kb())

@dp.message_handler(lambda m: USERS.get(m.from_user.id, {}).get("step") == "deposit" and m.text == TEXT["ru"]["back"])
async def back_to_deposit(message: types.Message):
    USERS[message.from_user.id]["step"] = "register"
    await message.answer(after_sub_text(), reply_markup=after_sub_kb())

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def deposit_check(message: types.Message):
    user = USERS.get(message.from_user.id)
    if user and user.get("step") == "deposit":
        USERS[message.from_user.id]["step"] = "wait"
        await message.answer(TEXT["ru"]["wait_deposit"])
        await asyncio.sleep(10)
        USERS[message.from_user.id]["access"] = True
        USERS[message.from_user.id]["step"] = "signals"
        USERS[message.from_user.id]["can_signal"] = True
        await message.answer(TEXT["ru"]["access"], reply_markup=signal_kb())

@dp.message_handler(lambda m: USERS.get(m.from_user.id, {}).get("step") == "signals" and m.text == TEXT["ru"]["back"])
async def back_to_signals(message: types.Message):
    USERS[message.from_user.id]["step"] = "deposit"
    await message.answer(TEXT["ru"]["deposit_request"], reply_markup=deposit_kb())

# --- –í–´–î–ê–ß–ê –°–ò–ì–ù–ê–õ–ê –° PROGRESS BAR ---
@dp.message_handler(lambda m: m.text == TEXT["ru"]["signal_btn"])
async def send_signal(message: types.Message):
    user = USERS.get(message.from_user.id)
    if not user or not user.get("access") or not user.get("can_signal"):
        return
    USERS[message.from_user.id]["can_signal"] = False

    await message.answer(TEXT["ru"]["analyzing"])
    await asyncio.sleep(5)

    num = user.get("signals_given", 0)
    if num < 3:
        k = round(random.uniform(1.00, 2.00), 2)
    else:
        k = round(random.uniform(2.00, 13.00), 2)

    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ—á–∫—É –¥–ª—è MarkdownV2!
    k_str = str(k).replace('.', '\\.')
    signal_text = f"üéØ *–õ–æ–≤–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç*: x{k_str}"

    await message.answer(signal_text)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ—Å–ª–µ —Å–∏–≥–Ω–∞–ª–∞
    await show_progress_bar(message.chat.id)

    USERS[message.from_user.id]["signals_given"] = num + 1

    await message.answer(TEXT["ru"]["wait_signal_btn"], reply_markup=signal_kb(active=False))
    await asyncio.sleep(5)
    USERS[message.from_user.id]["can_signal"] = True
    await message.answer("üîÅ –ú–æ–∂–Ω–æ —Å–Ω–æ–≤–∞ –ø–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª\\!", reply_markup=signal_kb(active=True))

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)